Zadanie 2) Przygotować wstępnie bibliotekę pozwalającą na generowanie i ewolucję programów w opracowanym mini języku. Biblioteka powinna posiadać funkcje analogiczne do tych z TinyGP m.in.:
generowanie losowych programów (drzew) o zadanej wielkości
możliwość testowania programów (obliczenia wartości funkcji przystosowania) na podstawie wektora danych wejściowych i danych wyjściowych. (Na razie nie implementujemy żadnej konkretnej funkcji przystosowania, będzie ona tworzona dla konkretnego problemu)

TODO:
operację krzyżowania dwóch drzew/programów
operację mutacji
selekcję osobników (programów) na podstawie wartości funkcji przystosowania (na razie selekcja turniejowa za zadawaną liczbą zawodników np. 2, 5, 10, itd.)

Chyba TODO:
serializację i deserializację (zapisanie/wczytanie) zadanego drzewa (programu)







Testy takie jak Kuba zrobił w tym pliku functionality testing tylko poprawione dla tych przypadków gdzie n musi wystąpić konkretnie 1 raz albo na konkretnej pozycji itd

Testy systemu:
Ostatnim etapem prac nad systemami ewolucji GP jest zaprojektowanie sposobów uczenia (podział na etapy uczenia, zdefiniowanie funkcji dopasowania, itp.) wybranych problemów i przetestowanie możliwości rozwiązywania wybranych problemów przez stworzone przez Państwa systemy ewolucji GP.

Proszę co najmniej przetestować swój system co najmniej na następujących problemach:

Jeden wybrany problem z BenchmarkSuiteGECCO2015 z zakresu 1-5 (strona 9)
Jeden wybrany problem z BenchmarkSuiteGECCO2015 ze zbioru {6, 15, 17, 18, 21}
Jeden wybrany problem z BenchmarkSuiteGECCO2015 ze zbioru {26, 27, 28,}
Regresja symboliczna dla funkcji boolowskiej (opis poniżej) (nie wiem czy to też)

Regresja symboliczna dla funkcji boolowskiej
Dana jest pewna funkcja boolowska (ang. boolean function) postaci:
f : {0,1}k → {0,1}
Czyli funkcja, której argumentem jest k zmiennych logicznych, a wyjściem jedna liczba logiczna (0/1)

Sprawdzić czy podczas procesu ewolucji GP uda się wygenerować program odtwarzający działanie tej funkcji boolowskiej.
Jako dane uczące (fitness cases) należy podać odwzorowanie wszystkich możliwych wektorów wejściowe (będzie ich 2k) na wartość wyjściową (0/1)

Funkcje boolowskie dla k=1:

D0
NOT(D0)

Przykładowe funkcje boolowskie dla k=2:

D0 AND D1
D0 OR D1
D0 XOR D1

itd.

Proszę sprawdzić czy Państwa system jest w stanie wygenerować programy odtwarzające funkcje boolowskie dla k=1, k=2, k=3,...., k=10

Ponieważ funkcję boolowską można reprezentować jako tabelę prawdy (dla danego k, tabela będzie miała k kolumn reprezentujących poszczególne dane wejściowe D0,D1,...,Dk; jedną kolumnę reprezentującą wynik funkcji 0/1; oraz 2k wierszy reprezentujących poszczególne kombinacje wartości D0,...,Dk), można wygenerować sobie losowo ta tabelę (tzn. kolumnę z wynikami funkcji) i traktować ją jako fitness cases.